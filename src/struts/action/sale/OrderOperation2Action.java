/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.action.sale;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import struts.action.Result;
import struts.action.ResultBasedAction;
import struts.action.StringResult;
import dbconnection.MysqlCon;
import orm.User;

/** 
 * MyEclipse Struts
 * Creation date: 02-10-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OrderOperation2Action extends ResultBasedAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	@Override
	public Result execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request) throws Exception {
		String msg="操作错误";
		int complete=1;
		int out=0;
		System.out.println(out);
		int orderid=Integer.parseInt(request.getParameter("id"));
		Date time=new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String pickingtime=sdf.format(time);
		System.out.println(pickingtime);
		HttpSession session = request.getSession();
		User user=(User)session.getAttribute("user");
		int userid=user.getUserId();
		MysqlCon msq=new MysqlCon();
		try{
		Connection conn=msq.connection();
		ResultSet rs=msq.query("select orderdetail.productID,product.amount,orderdetail.amount from amc.orderdetail,amc.product where orderdetail.productID=product.productID and orderdetail.orderID="+orderid,conn);
		rs.beforeFirst();
		while(rs.next()){
			if(rs.getFloat(2)<rs.getFloat(3))
	    		out=1;
	    	if(rs.getFloat(2)>0)
	    		complete=0;
		}
		if(out==1&&complete==1)
			out=2;
		}catch(SQLException e) {
			e.printStackTrace();
		}
		if(out==1){
			msq.update("update amc.order set amc.order.orderState='处理中' where amc.order.orderID="+orderid);//更新订单状态
			//System.out.println("insert into amc.picking(orderID,userID,pickingTime,pickingState) values("+orderid+","+userid+","+pickingtime+",'准备备货')");
			msq.insert("insert into amc.outstock(orderID,userID,outStockTime,outStockState) values("+orderid+","+userid+",'"+pickingtime+"','未处理')");
			int outstockid=0;
			try{
				Connection conn=msq.connection();
				ResultSet rs=msq.query("select outstockID from amc.outstock where outStockTime='"+pickingtime+"' and orderID="+orderid,conn);
				rs.beforeFirst();
				while(rs.next()){
					outstockid=rs.getInt(1);
				}
				msq.insert("insert into amc.picking(orderID,userID,pickingTime,pickingState) values("+orderid+","+userid+",'"+pickingtime+"','未处理')");
				int pickingid=0;
			rs=msq.query("select pickingID from amc.picking where pickingTime='"+pickingtime+"' and orderID="+orderid,conn);
		    rs.beforeFirst();
			while(rs.next())
						pickingid=rs.getInt(1);
			rs=msq.query("select orderdetail.productID,orderdetail.amount,product.amount from amc.orderdetail,amc.product where amc.orderdetail.orderID="+orderid+" and amc.orderdetail.productID=amc.product.productID",conn);
			rs.beforeFirst();
			while(rs.next()){
				if(rs.getFloat(2)<=rs.getFloat(3)){
					msq.insert("insert into amc.pickingdetail(pickingID,productID,pickingNum) values("+pickingid+","+rs.getInt(1)+","+rs.getFloat(2)+")");
					msq.update("update amc.product set amount="+(rs.getFloat(3)-rs.getFloat(2))+" where productID="+rs.getInt(1));
				}
				else if(rs.getFloat(2)>rs.getFloat(3) && rs.getFloat(3)!=0.0){
					msq.insert("insert into amc.pickingdetail(pickingID,productID,pickingNum) values("+pickingid+","+rs.getInt(1)+","+rs.getFloat(3)+")");
					msq.insert("insert into amc.outstockdetail(outStockID,productID,outStockNum) values("+outstockid+","+rs.getInt(1)+","+(rs.getFloat(2)-rs.getFloat(3))+")");
					msq.update("update amc.product set amount=0.0 where productID="+rs.getInt(1));
				}
				else
					msq.insert("insert into amc.outstockdetail(outStockID,productID,outStockNum) values("+outstockid+","+rs.getInt(1)+","+rs.getFloat(2)+")");
			}
			conn.close();
			msg="已开缺货单和备货单";
		}catch (SQLException e) {
			e.printStackTrace();
		}
		}
		else if(out==0){
			msq.update("update amc.order set amc.order.orderState='已处理' where amc.order.orderID="+orderid);//更新订单状态
			//System.out.println("insert into amc.picking(orderID,userID,pickingTime,pickingState) values("+orderid+","+userid+","+pickingtime+",'准备备货')");
			msq.insert("insert into amc.picking(orderID,userID,pickingTime,pickingState) values("+orderid+","+userid+",'"+pickingtime+"','未处理')");
			int pickingid=0;
			try{
				Connection conn=msq.connection();
				ResultSet rs=msq.query("select pickingID from amc.picking where orderID="+orderid,conn);
				rs.beforeFirst();
				while(rs.next()){
					pickingid=rs.getInt(1);
				}
				rs=msq.query("select orderdetail.productID,orderdetail.amount,product.amount from amc.orderdetail,amc.product where amc.orderdetail.orderID="+orderid+" and amc.orderdetail.productID=amc.product.productID",conn);
				rs.beforeFirst();
				while(rs.next()){
					if(rs.getFloat(2)<=rs.getFloat(3)){
						msq.insert("insert into amc.pickingdetail(pickingID,productID,pickingNum) values("+pickingid+","+rs.getInt(1)+","+rs.getFloat(2)+")");
						msq.update("update amc.product set amount="+(rs.getFloat(3)-rs.getFloat(2))+" where productID="+rs.getInt(1));
					}
					else if(rs.getFloat(2)>rs.getFloat(3) && rs.getFloat(3)!=0.0){
						msq.insert("insert into amc.pickingdetail(pickingID,productID,pickingNum) values("+pickingid+","+rs.getInt(1)+","+rs.getFloat(3)+")");
						msq.update("update amc.product set amount=0.0 where productID="+rs.getInt(1));
					}
				}
				conn.close();
				msg="已开备货单";
			}catch (SQLException e) {
				e.printStackTrace();
			}
		}
		else{
			msq.update("update amc.order set amc.order.orderState='处理中' where amc.order.orderID="+orderid);//更新订单状态
			//System.out.println("insert into amc.picking(orderID,userID,pickingTime,pickingState) values("+orderid+","+userid+","+pickingtime+",'准备备货')");
			msq.insert("insert into amc.outstock(orderID,userID,outStockTime,outStockState) values("+orderid+","+userid+",'"+pickingtime+"','未处理')");
			int outstockid=0;
			try{
				Connection conn=msq.connection();
				ResultSet rs=msq.query("select outstockID from amc.outstock where outStockTime='"+pickingtime+"' and orderID="+orderid,conn);
				rs.beforeFirst();
				while(rs.next()){
					outstockid=rs.getInt(1);
				}
				rs=msq.query("select orderdetail.productID,orderdetail.amount,product.amount from amc.orderdetail,amc.product where amc.orderdetail.orderID="+orderid+" and amc.orderdetail.productID=amc.product.productID",conn);
				rs.beforeFirst();
				while(rs.next()){
					msq.insert("insert into amc.outstockdetail(outStockID,productID,outStockNum) values("+outstockid+","+rs.getInt(1)+","+rs.getFloat(2)+")");
				}conn.close();
				msg="已开缺货单";
			}catch (SQLException e) {
				e.printStackTrace();
			}
		}
		StringResult string = new StringResult(msg);
		return string;
	}
}
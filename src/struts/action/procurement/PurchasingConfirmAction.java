/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.action.procurement;

import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import dbconnection.MysqlCon;
import struts.action.Result;
import struts.action.ResultBasedAction;
import struts.action.StringResult;
import entity.ImportDetail;
import orm.User;

/** 
 * MyEclipse Struts
 * Creation date: 02-07-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PurchasingConfirmAction extends ResultBasedAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	

	@Override
	public Result execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request) throws Exception {
		String msg="操作失败";
		String id=request.getParameter("id");
		String source=request.getParameter("source");
		
		try{
			MysqlCon msq=new MysqlCon();
			Connection conn=msq.connection();
			if (source.equals("againorder")){
			   msq.update("update againorder set againorderstate='已处理' where againorderID="+id);
			   HttpSession session = request.getSession();
				User user=(User)session.getAttribute("user");
				Integer userid=user.getUserId();
				Date time=new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String importdate=sdf.format(time);
				msq.insert("insert into amc.importpd(userID,addTime,state) values("+userid+",'"+importdate+"','未处理')");
				ResultSet rs=msq.query("select importPdID from amc.importpd where addTime='"+importdate+"'", conn);
				int importid=0;
				rs.beforeFirst();
				while(rs.next())
					importid=rs.getInt(1);
				msq.insert("insert into amc.payable(importPdID,invoiceRange,addTime,payState,userID) values("+importid+",'10天','"+importdate+"','未付款',"+userid+")");
				int payableid=0;
				rs=msq.query("select payableID from amc.payable where payable.importPdID="+importid, conn);
				rs.beforeFirst();
				while(rs.next())
					payableid=rs.getInt(1);
				rs=msq.query("select againorderdetail.productID,againorderdetail.productQua,product.productName,product.salePrice from amc.againorderdetail,amc.product where againorderdetail.productID=product.productID and againorderdetail.againOrderID="+id, conn);
				rs.beforeFirst();
				float sum=0;
				while(rs.next()){
					msq.insert("insert into amc.importpddetail(importPdID,productID,importNum) values("+importid+","+rs.getInt(1)+","+rs.getFloat(2)+")");
					msq.insert("insert into amc.payabledetail(payableID,productID,salePrice,productName,importNum,totalAccount) values("+payableid+","+rs.getInt(1)+","+rs.getFloat(4)*0.8+",'"+rs.getString(3)+"',"+rs.getFloat(2)+","+rs.getFloat(4)*0.8*rs.getFloat(2)+")");
				    sum=(float) (sum+rs.getFloat(4)*0.8*rs.getFloat(2));
				}
				msq.update("update amc.payable set totalAccount="+sum+" where payableID="+payableid);
				
			}  
			if (source.equals("outstock")){
				   msq.update("update outstock set outstockstate='已处理' where outstockID="+id);
				   HttpSession session = request.getSession();
					User user=(User)session.getAttribute("user");
					Integer userid=user.getUserId();
					Date time=new Date();
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					String importdate=sdf.format(time);
					msq.insert("insert into amc.importpd(userID,addTime,state) values("+userid+",'"+importdate+"','未处理')");
					ResultSet rs=msq.query("select importPdID from amc.importpd where addTime='"+importdate+"'", conn);
					int importid=0;
					rs.beforeFirst();
					while(rs.next())
						importid=rs.getInt(1);
					msq.insert("insert into amc.payable(importPdID,invoiceRange,addTime,payState,userID) values("+importid+",'10天','"+importdate+"','未付款',"+userid+")");
					int payableid=0;
					rs=msq.query("select payableID from amc.payable where payable.importPdID="+importid, conn);
					rs.beforeFirst();
					while(rs.next())
						payableid=rs.getInt(1);
					rs=msq.query("select outstockdetail.productID,outstockdetail.outStockNum,product.productName,product.salePrice from amc.outstockdetail,amc.product where outstockdetail.productID=product.productID and outstockdetail.outStockID="+id, conn);
					rs.beforeFirst();
					float sum=0;
					while(rs.next()){
						msq.insert("insert into amc.importpddetail(importPdID,productID,importNum) values("+importid+","+rs.getInt(1)+","+rs.getFloat(2)+")");
						msq.insert("insert into amc.payabledetail(payableID,productID,salePrice,productName,importNum,totalAccount) values("+payableid+","+rs.getInt(1)+","+rs.getFloat(4)*0.8+",'"+rs.getString(3)+"',"+rs.getFloat(2)+","+rs.getFloat(4)*0.8*rs.getFloat(2)+")");
					    sum=(float) (sum+rs.getFloat(4)*0.8*rs.getFloat(2));
					}
					msq.update("update amc.payable set totalAccount="+sum+" where payableID="+payableid);
					conn.close();
			}
			conn.close();
			msg="操作成功";
			StringResult string=new StringResult(msg);
			return string;
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			msg="数据库错误";
			StringResult string=new StringResult(msg);
			return string;
		}
		
		
		
	}
}
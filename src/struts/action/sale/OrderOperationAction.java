/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.action.sale;

import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import dbconnection.MysqlCon;
import entity.Product;


/** 
 * MyEclipse Struts
 * Creation date: 01-31-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OrderOperationAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String orderid=request.getParameter("id");
		String orderstate=request.getParameter("state");
		try {
			orderstate=new String(orderstate.getBytes("ISO-8859-1"),"utf-8");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		String out="0";
		String complete="1";
		System.out.println(orderstate);
		String customername="";
		String receiveperson="";
		String receiveaddress="";
		String orderdate="";
		String orderperson="";
		try{
			MysqlCon msq=new MysqlCon();
			Connection conn=msq.connection();
			ResultSet rs=msq.query("select customer.customerName,order.receiveMan,order.receiveAddress,order.orderDate,user.userName from amc.order,amc.customer,amc.user where amc.order.customerID=amc.customer.customerID and amc.order.userID=amc.user.userID and amc.order.orderID="+orderid,conn);
			rs.beforeFirst();
			while(rs.next()){
				customername=rs.getString(1);
				receiveperson=rs.getString(2);
				receiveaddress=rs.getString(3);
				orderdate=rs.getDate(4)+"";
				orderperson=rs.getString(5);
			}
			request.setAttribute("orderid", orderid);
			request.setAttribute("customername", customername);
			request.setAttribute("receiveperson", receiveperson);
			request.setAttribute("receiveaddress", receiveaddress);
			request.setAttribute("orderdate", orderdate);
			request.setAttribute("orderperson", orderperson);
			request.setAttribute("orderstate", orderstate);
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		List<Product> productlist=new ArrayList<Product>();
		try{
			int id=0;
			MysqlCon msq=new MysqlCon();
			Connection conn=msq.connection();
			ResultSet rs=msq.query("select orderdetail.productID,product.productName,product.productSize,supplier.supplierCode,product.salePrice,product.amount,orderdetail.amount from amc.orderdetail,amc.product,amc.supplier where amc.orderdetail.orderID="+orderid+" and amc.orderdetail.productID=amc.product.productID and amc.product.supplierID=amc.supplier.supplierID",conn);
		    rs.beforeFirst();
		    while(rs.next()){
		    	id=id+1;
		    	Product product=new Product();
		    	product.setIds(id+"");
		    	product.setProductid(rs.getInt(1)+"");
		    	product.setProductname(rs.getString(2));
		    	product.setProductsize(rs.getString(3));
		    	product.setSuppliercode(rs.getString(4));
		    	product.setSaleprice(rs.getFloat(5)+"");
		    	product.setAmount(rs.getFloat(6)+"");
		    	product.setDemond(rs.getFloat(7)+"");
		    	if(rs.getFloat(6)<rs.getFloat(7))
		    		out="1";
		    	if(rs.getFloat(6)>0)
		    		complete="0";
		    	productlist.add(product);
		    }
		    conn.close();
		    request.setAttribute("productlist", productlist);
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(out.equals("1")&&complete.equals("1"))
			request.setAttribute("out", "2");
		else
		    request.setAttribute("out", out);
		System.out.println(orderstate);
		System.out.println(out);
		if(orderstate.equals("未处理")){
			return mapping.findForward("orderoperation");
		}
		else if(orderstate.equals("处理中")){
			//return mapping.findForward("outstockac");
			
		     return new  ActionForward( "/orderOutStockView.do?id="+orderid+"&&state="+orderstate); 
		}
		else{
		return mapping.findForward("orderview");
		}
	}
}
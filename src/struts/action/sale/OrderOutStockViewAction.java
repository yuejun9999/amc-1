/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package struts.action.sale;

import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import dbconnection.MysqlCon;
import entity.Product;


/** 
 * MyEclipse Struts
 * Creation date: 02-09-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OrderOutStockViewAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String orderid=request.getParameter("id");
		String orderstate=request.getParameter("state");
		try {
			orderstate=new String(orderstate.getBytes("ISO-8859-1"),"utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try{
		MysqlCon msq=new MysqlCon();
		Connection conn=msq.connection();
		int outstockid=0;
		System.out.println("select outstock.outstockID, user.userName,outstock.outStockTime,outstock.outStockState from amc.outstock,amc.user where outstock.userID=user.userID and outstock.orderID="+orderid);
		ResultSet rs=msq.query("select outstock.outstockID, user.userName,outstock.outStockTime,outstock.outStockState from amc.outstock,amc.user where outstock.userID=user.userID and outstock.orderID="+orderid,conn);
		
			rs.beforeFirst();
			while(rs.next()){
				request.setAttribute("orderid", orderid);
				request.setAttribute("outstockid", rs.getInt(1)+"");
				outstockid=rs.getInt(1);
				request.setAttribute("person", rs.getString(2));
				request.setAttribute("outstockdate", rs.getDate(3)+"");
				request.setAttribute("outstockstate", rs.getString(4));
				request.setAttribute("orderstate", orderstate);
			}
		
		boolean isout=false;
		List<Product> productlist=new ArrayList<Product>();
		
			int id=0;
			rs=msq.query("select outstockdetail.productID,product.productName,product.productSize,product.amount,outstockdetail.outStockNum from amc.product,amc.outstockdetail where outstockdetail.productID=product.productID and outstockdetail.outStockID="+outstockid,conn);
		    rs.beforeFirst();
		    while(rs.next()){
		    	id=id+1;
		    	Product product=new Product();
		    	product.setIds(id+"");
		    	product.setProductid(rs.getInt(1)+"");
		    	product.setProductname(rs.getString(2));
		    	product.setProductsize(rs.getString(3));
		    	product.setAmount(rs.getFloat(4)+"");
		    	product.setDemond(rs.getFloat(5)+"");
		    	productlist.add(product);
		    	if(rs.getFloat(4)<rs.getFloat(5))
		    		isout=true;
		    }
		    conn.close();
		    request.setAttribute("isout", isout+"");
		    request.setAttribute("productlist", productlist);
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mapping.findForward("orderoutstockview");
	
}
}